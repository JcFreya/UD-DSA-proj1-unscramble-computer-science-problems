Run time analysis (Worst-Case Big-O Notation)
Task0
  Big O:
  O(1) -- no matter how the input change, the execution is constant time

Task1
  Big O:
  O(n^2) -- since it's using lists an lookup time in/not in lists/array in linear, so that the worst-case time complexity will be O(n^2)

Task2
  Big O:
  O(nlogn) -- since using sorted() function here which has this complexity based on docs

Task3
Part A
  Big O:
  O(n^2) --  sort() function makes the complexity to nlogn, but since it's using lookup in/not in a list/array in linear,
  which the worst-case time complexity will be O(n^2). Since O(n^2) is greater than O(n logn), the worst-case time complexity will be O(n^2)

Part B
  Big O:
  O(n) -- the complexity depends on length of input files

Task4
  Big O:
  O(n^2) -- since it's using lookup in/not in a list/array in linear, adding the outer for loop,
  which the worst-case time complexity will be O(n^2)
